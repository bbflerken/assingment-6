import java.util.Scanner;

public class Driver {

	public static void main( String [ ] args )
	{		
		Scanner in = new Scanner (System.in);//Initializing scanner.
		int count = 0;
		
	    while(true)
        {
        	System.out.println("===================================================");
        	System.out.println("0. Quit 1.Merge Sort 2.Insertion Sort 3.Shell Sort 4.Quick Sort");
        	System.out.println("===================================================");
        	System.out.print("Select an option: ");
        	int choice = in.nextInt();

        	if(choice == 1)//Merge Sort
        	{
        		System.out.print("Enter the numbers of integers: ");//Asking user for number of elements in the array.
        		int num = in.nextInt();
        		int array[] = new int [num];//Creating array
        		
        		for(int i= 0; i < num ;i++)
        		{
        			System.out.print("Enter the " + count++ +" number");
        			array[i]= in.nextInt();
        		}
        		mergeSort(array);
        		num =duplicates(array, array.length);
        	}
        	if(choice == 2)//Insertion Sort
        	{
        		System.out.print("Enter the numbers of integers: ");//Asking user for number of elements in the array.
        		int num = in.nextInt();
        		int array[] = new int [num];//Creating array
        		System.out.print("Enter the " + num +" integers: ");//Asking the user for the elements in the array
	
        		for(int i= 0; i < num ;i++)
        			array[i]= in.nextInt();
        		
        		insertionsort(array);
        		num =duplicates(array, array.length);
        	}
        	if(choice == 3)//Shell Sort

        	{
        		System.out.print("Enter the numbers of integers: ");//Asking user for number of elements in the array.
        		int num = in.nextInt();
        		int array[] = new int [num];//Creating array
        		System.out.print("Enter the " + num +" integers: ");//Asking the user for the elements in the array
        		
        		for(int i= 0; i < num ;i++)
        			array[i]= in.nextInt();
        		
        		shellsort(array);
        		num= duplicates(array, array.length);
        	}
        	if(choice == 4)//Quick Sort

        	{
        		System.out.print("Enter the numbers of integers: ");//Asking user for number of elements in the array.
        		int num = in.nextInt();
        		int array[] = new int [num];//Creating array
        		System.out.print("Enter the " + num +" integers: ");//Asking the user for the elements in the array
        		
        		for(int i= 0; i < num ;i++)
        			array[i]= in.nextInt();
        		
        		quicksort(array);
        		num = duplicates(array, array.length);
        	}
        	if(choice == 0)// Quit Program
        		break;
        	else
        	{
        		System.out.println("Wrong entry!");
            	System.out.print("Select an option: ");
            	choice = in.nextInt();
        	}

        }
	}
	
	public static int duplicates (int a [], int n)//function to remove duplicates 
	{
		int [] temp = new int[n];
		
		int count = 0;
		for(int i= 0; i < n; i++ )
		{
			if(a[i] != a[i+1])
				temp[count++] = a[i];
		}
		
		temp[count++] = a[n-1];
		for(int i=0; i<count; i++)
			a[i] = temp[i];
		return j;
	}
	
   public static void print(int arr[])
    {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
	
	public static void mergeSort(int [] a) 
	{
		int [] tmpArray= new int [a.length];
		mergeSort(a, tmpArray,0,a.length-1);
	}
	public static void mergeSort(int [] a, int []tmpArray, int left, int right) 
	{
		if(left < right)
		{
			int center = (left + right) / 2;
			mergeSort(a,tmpArray, left, center);
			mergeSort(a,tmpArray, center+1, right);
			merge(a,tmpArray, left, center+1, right);
			
		}	
	}
	public static void merge(int [] a, int []tmpArray, int leftPos, int rightPos, int rightEnd) 
	{
		int leftEnd= rightPos-1;
		int tmpPos = leftPos;
		int numElements = rightEnd + leftPos+1;
		
		while(leftPos <= leftEnd && rightPos <= rightEnd)
		{
			if(a[leftPos] <= a[rightPos])
				tmpArray[tmpPos++]= a[leftPos++];
			else
				tmpArray[tmpPos++]=a[rightPos++];
		}
		while(leftPos <= leftEnd)
			tmpArray[tmpPos++] = a[rightPos++];
		while(rightPos <= rightEnd)
			tmpArray[tmpPos++]= a[rightPos++];
		for(int i = 0; i< numElements; i++, rightEnd--)
			a[rightEnd] = tmpArray[rightEnd];
	}
	
	public static void insertionsort(int []a)
	{
		for(int i = 1; i<a.length;i++)
		{
			int key = a[i];
			int j = i-1;
			
			while(j >=0 && a[j] > key)
			{
				a[j+1] = a[j];
				j = j-1;
			}
			a[j+1]= key;
		}
	}
	
	public static void shellsort(int [] a) 
	{
		for(int gap = a.length/ 2; gap >0; gap /=2)
			for(int i = gap;i < a.length; i++) 
			{
				int tmp = a[i];
				int j = i;
				for( j = i; j >= gap && a[j-gap] > tmp ; j -= gap)
					a[j] = a [j-gap];
				a[j] = tmp;
			}
	}
	
	public static void quicksort(int []a)
	{
		quicksort(a, 0, a.length -1);
	}
	public static void swap(int []a, int low, int high) 
	{
		int tmp= a[low];
		a[low]=a[high];
		a[high]= tmp;
	}
	public static int Part (int []a, int low, int high)
	{
		int pivot = a[high];
		
		for(int i = low; i <= high-1; i++)
		{
			if(a[i] < pivot)
			{
				low++;
				swap(a, low, i);
			}
		}
		 swap(a, low+1, high);
		 return (low +1);
	}
	public static void quicksort(int []a, int low, int high) 
	{
		if(low < high)
		{
			int index= Part(a, low, high);
			quicksort(a, low,index-1);
			quicksort(a, index+1,high);
		}
	}
}
