import java.util.Scanner;

public class Driver {

	public static void main( String [ ] args )
	{		
		Scanner in = new Scanner (System.in);//Initializing scanner.
		int count = 1;

      System.out.println("===================================================");
     	System.out.println("1.Merge Sort 2.Insertion Sort 3.Shell Sort 4.Quick Sort");
     	System.out.println("===================================================");
     	System.out.print("Select an option: ");
      int choice = in.nextInt();

      if(choice == 1)//Merge Sort
      {
        	System.out.print("Enter the numbers of integers: ");//Asking user for number of elements in the array.
        	int num = in.nextInt();
        	int array[] = new int [num];//Creating array
        		
        	for(int i= 0; i < num ;i++)
        	{
        		System.out.print("Enter the " + count++ +" number");
       		array[i]= in.nextInt();
        	}
       	mergeSort(array, 0, num-1);
         print(array);
        	//duplicates(array, num);
     	}
     	if(choice == 2)//Insertion Sort
     	{
        	System.out.print("Enter the numbers of integers: ");//Asking user for number of elements in the array.
        	int num = in.nextInt();
        	int array[] = new int [num];//Creating array
         
        	for(int i= 0; i < num ;i++)//Asking the user for the elements in the array
        	{
        		System.out.print("Enter the " + count++ +" number");
       		array[i]= in.nextInt();
        	}        		
        	insertionsort(array);
         print(array);
        	//duplicates(array,num);
        }
     	if(choice == 3)//Shell Sort
      {
        	System.out.print("Enter the numbers of integers: ");//Asking user for number of elements in the array.
        	int num = in.nextInt();
        	int array[] = new int [num];//Creating array
         
         for(int i= 0; i < num ;i++)//Asking the user for the elements in the array
        	{
        		System.out.print("Enter the " + count++ +" number");
       		array[i]= in.nextInt();
        	} 		
        	shellsort(array);
         print(array);
         //duplicates(array, num);
       }
     	if(choice == 4)//Quick Sort
     	{
        	System.out.print("Enter the numbers of integers: ");//Asking user for number of elements in the array.
        	int num = in.nextInt();
        	int array[] = new int [num];//Creating array
         	
         for(int i= 0; i < num ;i++)//Asking the user for the elements in the array
        	{
        		System.out.print("Enter the " + count++ +" number");
       		array[i]= in.nextInt();
        	}
        		
        quicksort(array,0,num-1);
        print(array);
       //duplicates(array, num);
       }
      else
        	System.exit(0);
   }
	
	public static void duplicates (int a [], int n)//function to remove duplicates 
	{
		int [] temp = new int[n];
      int duplicates []= new int [n];
		
		int count = 0;
      
		for(int i= 0; i < n; i++ )
		{
			if(a[i] != a[i+1])
				temp[count++] = a[i];
         else
            duplicates[count++] = a[i+1]; 
		}
		
		temp[count++] = a[n-1];
      
		for(int i=0; i<count; i++)
			a[i] = temp[i];
         
      System.out.print("The resulting array is: ");   
      print(a);

	}
	
   public static void print(int arr[])//Function to print sorted array
   {   
      for (int i = 0; i < arr.length; ++i)
         System.out.print(arr[i] + " ");//Prints the array
      System.out.println();//Creates a new line
    }
	
	public static void mergeSort(int [] a, int left, int right) //Sorting Routine
	{
		if(left < right)//Compares that left is less than right
		{
			int center = (left + (right-1)) / 2;//Gets the center position
			mergeSort(a, left, center);//Recursively calls sorting routine for left side
			mergeSort(a, center+1, right);//Recursively calls sorting routine for right side
			merge(a, left, center+1, right);//Merge Routine Call
		}	
	}
	public static void merge(int [] a, int left, int center, int right) //MErge Algorithm
	{  
      int tmpArray [] = new int[right-left+1];//Creates a temporary array to stored the sorted numbers
       
		int index1 = left, index2 = center+1, num = 0;//Indices to control the position on the arrays
      
		while(index1 <= center && index2 <= right)//Loop to sort array
		{
			if(a[index1] <= a[index2])//Compare the arrays
			{
            tmpArray[num]=a[index1];//Pass the numbers to the temporary array
            index1++; num++;//increment the index
         }
			else
			{
            tmpArray[num]=a[index2];//Pass the numbers to the temporary array
            index2++; num++;//increment the index
         }	
     	}
		while(index1 <= center)
      {
            tmpArray[num]=a[index1];//Pass the numbers to the temporary array
            index1++; num++;//increment the index 
      }
		while(index2 <= right)
		{
            tmpArray[num]=a[index2];//Pass the numbers to the temporary array
            index2++; num++;//increment the index 
      }
      
      for(int i =left; i <right; i++)//To transfer the sorted array into the original
         a[i]=tmpArray[i-left];
  	}
	
	public static void insertionsort(int []a)//Insertion Sort Routine
	{
		for(int i = 1; i<a.length;i++)
		{
			int key = a[i];//Takes the second element of the array
			int j = i-1;//index
			
			while(j >=0 && a[j] > key)//Compares the elements on the array
			{
				a[j+1] = a[j];//Change positions
				j = j-1;//Decrement the index
			}
			a[j+1]= key;//Change position
		}
	}
	
	public static void shellsort(int [] a)//Shell Sort Routine
	{
		for(int gap = a.length/ 2; gap >0; gap /=2)
			for(int i = gap;i < a.length; i++) 
			{
				int tmp = a[i];
				int j = i;
				for( j = i; j >= gap && a[j-gap] > tmp ; j -= gap)
					a[j] = a [j-gap];
				a[j] = tmp;
			} 
	}
	
   public static void quicksort(int []a, int low, int high)//Quick sort Routine
	{
		if(low < high)//Compares the indices
		{
			int index= Part(a, low, high);//
			quicksort(a, low,index-1);//Recursive call 
			quicksort(a, index+1,high);//Recursive call
		}
	}
	public static void swap(int []a, int low, int high)//Swap two elements on the array
	{
		int tmp= a[low];//Temporarily store the element
		a[low]=a[high];//Swap with another element
		a[high]= tmp;//Store the element changed
	}
	public static int Part (int []a, int low, int high)
	{
		int pivot = a[high];//Take the last elements as pivot
		int small= low-1;//Indicates the right position of pivot so far
      
		for(int i = low; i <= high-1; i++)
		{
			if(a[i] < pivot)//Compares elements on th array
			{
				small++;//Increments the index of smaller element
				swap(a, small, i);//Swaps elements
			}
		}
		 swap(a, small+1, high);//Swap Elements
		 return (small +1);//Returns the position
	}
}
